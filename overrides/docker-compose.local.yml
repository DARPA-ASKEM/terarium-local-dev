version: '3'

services:
  hmi-server:
    image: ${HMI_SERVER_IMAGE:-hmi-server-local}:${HMI_SERVER_VERSION:-latest}
    build:
      context: ${TERARIUM_DIRECTORY:-.}
      dockerfile: packages/services/hmi-server/docker/Dockerfile.dev
    environment:
      - QUARKUS_OIDC_ENABLED=${QUARKUS_OIDC_ENABLED:-false}
      - QUARKUS_KEYCLOAK_POLICY_ENFORCER_ENABLE=${QUARKUS_KEYCLOAK_POLICY_ENFORCER_ENABLE:-false}
      - QUARKUS_SECURITY_AUTH_ENABLED_IN_DEV_MODE=${QUARKUS_SECURITY_AUTH_ENABLED_IN_DEV_MODE:-false}
      - QUARKUS_HTTP_HOST=${QUARKUS_HTTP_HOST:-0.0.0.0}
      - terarium-db-host=${TERRARIUM_DB_HOST:-terarium-db}
      - terarium-db-port=${TERRARIUM_DB_PORT:-5432}
      - data-service-host=${DATA_SERVICE_HOST:-data-service}
      - data-service-port=${DATA_SERVICE_PORT:-8000}
      - model-service-url=${MODEL_SERVICE_URL:-http://model-service:3000}
      - simulation-service-url=${JULIA_SERVICE_URL:-http://simulation-service:8080}
      - pyciemss-api-url=${PYCIEMSS_API_URL:-http://pyciemss-api:8010}
  hmi-client:
    image: ${HMI_CLIENT_IMG:-hmi-client-local}:${HMI_CLIENT_VERSION:-latest}
    build:
      context: ${TERARIUM_DIRECTORY:-.}/packages/client
      dockerfile: hmi-client/docker/Dockerfile.dev
    environment:
      - BYPASS_KEYCLOAK=${HMI_CLIENT_BYPASS_KEYCLOAK:-true}
      - VITE_BYPASS_KEYCLOAK=${HMI_CLIENT_BYPASS_KEYCLOAK:-true}
      - hmi_server_host=${HMI_CLIENT_HMI_SERVER_HOST:-hmi-server}
      - hmi_server_port=${HMI_SERVER_PORT:-3000}
      - VITE_JUPYTER_TOKEN=89f73481102c46c0bc13b2998f9a4fce
      - COMPOSED=true
    ports:
      - ${HMI_CLIENT_PORT:-3020}:${HMI_CLIENT_SERVICE_PORT:-8080}
  data-service-migrations:
    image: ${DATA_SERVICE_MIGRATIONS_IMG:-terarium-data-service-migrations}:${DATA_SERVICE_VERSION:-latest}
    build:
      context: ${TDS_DIRECTORY:-.}
      dockerfile: docker/Dockerfile.migrations
    env_file:
      - tds.local.env
    entrypoint: /run_migrations.sh
    depends_on:
      data-service-elasticsearch:
        condition: service_healthy
      terarium-db:
        condition: service_healthy
  data-service:
    image: ${DATA_SERVICE_IMG:-terarium-data-service}:${DATA_SERVICE_VERSION:-latest}
    build:
      context: ${TDS_DIRECTORY:-.}
      dockerfile: docker/Dockerfile
    env_file:
      - tds.local.env
    ports:
      - ${DATA_SERVICE_PORT:-8000}:8000
    depends_on:
      data-service-migrations:
        condition: service_completed_successfully
  data-service-elasticsearch:
    hostname: elasticsearch
    image: elasticsearch:${ELASTISEARCH_VERSION:-8.5.3}
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - action.auto_create_index=false
    ports:
      - target: 9200
        published: ${ELASTICSEARCH_PORT:-9200}
    healthcheck:
      test: curl http://localhost:${ELASTICSEARCH_PORT:-9200}/_cluster/health?wait_for_status=yellow || exit 1
      interval: 10s
      timeout: 20s
      retries: 5
  minio:
    image: minio/minio:RELEASE.2021-07-27T02-40-15Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-miniouser}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniopass}
    command: [ "minio", "server", "/data" ]
    volumes:
      - minio-data:/data
    ports:
      - ${MINIO_PORT:-9000}:9000
      - ${MINIO_UI_PORT:-9001}:9001
  neo4j:
    image: ${NEO4J_IMG:-ghcr.io/darpa-askem/data-service-graphdb}:${NEO4J_VERSION:-5.3.0.3}
    expose:
      - 7474
      - 7687
    environment:
      - NEO4J_PLUGINS=["apoc"]
      - apoc.import.file.enabled=true
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=512M
      - PG_HOST=${TERRARIUM_DB_HOST:-terarium-db}
      - PG_PORT=${TERRARIUM_DB_PORT:-5432}
      - PG_USER=${TERRARIUM_DB_USER:-terarium}
      - PG_PASSWORD=${TERRARIUM_DB_PASSWORD:-terarium123}
      - PG_DB=${DATA_SERVICE_DB:-askem}
    depends_on:
      - terarium-db
  simulation-service:
    image: ${JULIA_SIM_IMG:-ghcr.io/darpa-askem/simulation-service}:${JULIA_SERVICE_VERSION:-latest}
    ports:
      - ${JULIA_SERVICE_PORT:-3030}:8080
    environment:
      SIMSERVICE_TDS_URL: ${TDS_URL:-http://data-service:8000}
  model-service:
    image: ${MODEL_SERVICE_IMG:-ghcr.io/darpa-askem/model-service}:${MODEL_SERVICE_VERSION:-latest}
    ports:
      - ${MODEL_SERVICE_PORT:-3010}:8888
  jupyter:
    image: ${JUPYTER_LLM_IMG:-ghcr.io/darpa-askem/jupyter-llm}:${JUPYTER_SERVICE_VERSION:-latest}
    ports:
      - ${JUPYTER_PORT:-8889}:8888
    environment:
      DATA_SERVICE_URL: ${TDS_URL:-http://data-service:8000}
      SIMULATION_SCHEDULER_URL: ${JULIA_SERVICE_URL:-http://simulation-service:8080}
      JUPYTER_SERVER: ${JUPYTER_SERVER:-http://jupyter:8888}
    env_file:
      - .openai.env
  terarium-db:
    image: ${TERARIUM_DB_IMG-:postgres}:${TERARIUM_DB_VERSION:-15.1}
    expose:
      - ${TERRARIUM_DB_PORT:-5432}
    environment:
      POSTGRES_USER: ${TERRARIUM_DB_USER:-terarium}
      POSTGRES_PASSWORD: ${TERRARIUM_DB_PASSWORD:-terarium123}
      POSTGRES_DB: ${TERRARIUM_DB_DB:-terarium}
    volumes:
      - terarium-db-storage:/var/lib/postgresql/data
      - ./db/:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TERRARIUM_DB_USER:-terarium} -d ${TERRARIUM_DB_DB:-terarium}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  pyciemss_api:
    container_name: pyciemss-api
    hostname: pyciemss-api
    build:
      context: ${PYCIEMSS_SIM_DIRECTORY}
      dockerfile: docker/Dockerfile.api
    ports:
      - ${PYCIEMSS_API_PORT:-8010}:8000
    environment:
      TDS_URL: ${TDS_URL:-http://data-service:8000}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq.pyciemss}
    env_file:
      - sim.local.env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  redis:
    container_name: redis
    image: redis
    ports:
      - ${REDIS_PORT:-6379}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: 'rabbitmq:3'
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${RABBITMQ_PORT:-5672}:5672
      - ${RABBITMQ_UI_PORT:-15672}:15672
  rqworker:
    container_name: pyciemss-worker
    build:
      context: ${PYCIEMSS_SIM_DIRECTORY}
      dockerfile: docker/Dockerfile.worker
    env_file:
      - sim.local.env
    depends_on:
      redis:
        condition: service_healthy
      pyciemss_api:
        condition: service_started
volumes:
  minio-data:
    driver: local
  terarium-db-storage:
    driver: local
